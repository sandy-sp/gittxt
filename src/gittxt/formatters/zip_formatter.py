from pathlib import Path
from zipfile import ZipFile
import asyncio

class ZipFormatter:
    def __init__(self, repo_name: str, output_dir: Path, output_files: list, non_textual_files: list, repo_path: Path, repo_url: str = None):
        self.repo_name = repo_name
        self.output_dir = output_dir
        self.output_files = output_files  # txt, json, md outputs
        self.non_textual_files = non_textual_files
        self.repo_path = repo_path
        self.repo_url = repo_url

    async def generate(self) -> Path:
        zip_path = self.output_dir / f"{self.repo_name}_bundle.zip"
        await asyncio.to_thread(self._create_zip, zip_path)
        return zip_path

    def _create_zip(self, zip_dest: Path):
        zip_dest.parent.mkdir(parents=True, exist_ok=True)

        with ZipFile(zip_dest, "w") as zipf:
            # Include all formatted TEXTUAL outputs at ZIP root
            for output in self.output_files:
                zipf.write(output, arcname=output.name)

            # README inside the ZIP explaining contents
            zipf.writestr("README-gittxt.txt", self._get_zip_readme())

            # Include NON-TEXTUAL files preserving folder structure under /assets
            for asset in self.non_textual_files:
                rel = asset.relative_to(self.repo_path)
                arcname = f"assets/{rel}"
                zipf.write(asset, arcname=arcname)

        if zip_dest.exists():
            print(f"✅ ZIP created at {zip_dest}")
        else:
            print(f"❌ Failed to create ZIP at {zip_dest}")

    def _get_zip_readme(self) -> str:
        url_line = f"Repository URL: {self.repo_url}\n" if self.repo_url else ""
        return (
            f"Gittxt Export Bundle for {self.repo_name}\n"
            "===================================\n"
            "\n"
            f"{url_line}"
            "Includes:\n"
            "- Extracted text files: .txt, .json, .md\n"
            "- Assets placed under /assets/ folder preserving structure\n"
            "\n"
            "Generated by Gittxt AI tooling\n"
        )
