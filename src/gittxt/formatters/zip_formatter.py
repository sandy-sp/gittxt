from pathlib import Path
from zipfile import ZipFile
import asyncio
import hashlib
import os
from gittxt.core.logger import Logger
from gittxt.utils.github_url_utils import build_github_repo_url

logger = Logger.get_logger(__name__)

class ZipFormatter:
    def __init__(self, repo_name: str, output_dir: Path, output_files: list, non_textual_files: list, repo_path: Path, repo_url: str = None):
        self.repo_name = repo_name
        self.output_dir = output_dir
        self.output_files = output_files
        self.non_textual_files = non_textual_files
        self.repo_path = repo_path
        self.repo_url = repo_url

    async def generate(self) -> Path:
        """
        Create a ZIP file containing all textual outputs plus non-textual assets
        under /assets/. Adds a README file describing the bundle.
        """
        zip_path = self.output_dir / f"{self.repo_name}_bundle.zip"
        await asyncio.to_thread(self._create_zip, zip_path)
        return zip_path

    def _create_zip(self, zip_dest: Path):
        zip_dest.parent.mkdir(parents=True, exist_ok=True)

        with ZipFile(zip_dest, "w") as zipf:
            # 1. Include all textual outputs at the ZIP root
            for output in self.output_files:
                if output and output.exists():
                    zipf.write(output, arcname=output.name)
                else:
                    logger.warning(f"⚠️ Skipping missing output file: {output}")

            # 2. README describing contents
            zipf.writestr("README-gittxt.txt", self._get_zip_readme())

            # 3. Include non-textual files in /assets
            for asset in self.non_textual_files:
                if not asset.exists():
                    logger.warning(f"⚠️ Skipping missing asset: {asset}")
                    continue
                try:
                    rel = asset.relative_to(self.repo_path)
                    rel_str = str(rel).replace(os.sep, "/")
                    name_hash = hashlib.sha1(rel_str.encode()).hexdigest()[:8]
                    safe_name = f"{rel.stem}_{name_hash}{rel.suffix}"
                    arcname = f"assets/{safe_name}"
                    zipf.write(asset, arcname=arcname)
                except Exception as e:
                    logger.error(f"❌ Failed to add asset {asset}: {e}")

        if zip_dest.exists():
            logger.info(f"✅ ZIP created at {zip_dest}")
        else:
            logger.error(f"❌ Failed to create ZIP at {zip_dest}")

    def _get_zip_readme(self) -> str:
        repo_link = build_github_repo_url(self.repo_url) if self.repo_url else ""
        lines = [
            f"Gittxt Export Bundle for {self.repo_name}",
            "===================================",
            "",
            f"Repository URL: {repo_link}" if repo_link else "",
            "Includes:",
            "- Extracted textual outputs (.txt, .json, .md)",
            "- Non-textual assets placed in /assets/",
            "",
            "Generated by Gittxt AI tooling"
        ]
        return "\n".join(lines)
