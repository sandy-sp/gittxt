from fastapi import APIRouter, HTTPException, Path
from pathlib import Path
import json

from gittxt.core.logger import Logger
from gittxt.core.config import ConfigManager

router = APIRouter()
logger = Logger.get_logger(__name__)
config = ConfigManager.load_config()

OUTPUT_DIR = Path(config.get("output_dir", "./gittxt_output")).resolve()

@router.get("/summary/{scan_id}", tags=["Summary"])
async def get_summary(scan_id: str):  # Changed Path(...) to str
    """
    Return the JSON summary generated by OutputBuilder under /json subfolder.
    """
    scan_path = OUTPUT_DIR / scan_id
    json_path = scan_path / "json"
    if not scan_path.exists() or not json_path.exists():
        raise HTTPException(status_code=404, detail="No summary folder found")

    files = list(json_path.glob("*.json"))
    if not files:
        raise HTTPException(status_code=404, detail="No JSON summary found")

    # pick first
    f = files[0]
    try:
        data = json.loads(f.read_text(encoding="utf-8"))
        return data
    except Exception as e:
        logger.error(f"[SUMMARY] Error reading {f}: {e}")
        raise HTTPException(status_code=500, detail="Cannot parse summary JSON")
