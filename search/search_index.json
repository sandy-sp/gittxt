{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcd8 Welcome to Gittxt Docs","text":"<p>Gittxt is a command-line tool and plugin framework that converts Git repositories into clean, structured, AI-ready datasets.</p> <p>Whether you're analyzing open source code, building training corpora, or archiving structured knowledge \u2014 Gittxt helps you: - Extract textual content from repos with filters and format options - Bundle outputs into <code>.txt</code>, <code>.json</code>, <code>.md</code>, or <code>.zip</code> - Preview directory trees, token counts, and non-textual assets - Extend functionality with plugins like a FastAPI backend or Streamlit UI</p>"},{"location":"#try-the-visual-web-app","title":"\ud83c\udfa8 Try the Visual Web App","text":"<p>Want to understand how Gittxt works without installing anything? Check out the hosted Streamlit app: </p> <p>\u27a1\ufe0f Try Gittxt on Streamlit Cloud</p>"},{"location":"#quick-navigation","title":"\ud83d\ude80 Quick Navigation","text":"Section Description Getting Started Install and run your first scan User Guide Learn about configuration, filters, and outputs CLI Reference Full reference for all subcommands Plugin System Streamlit + API plugin setup and usage API Reference Endpoints and request/response structure Contributing For contributors and plugin developers Changelog See what\u2019s new in each release"},{"location":"#key-features","title":"\ud83d\udca1 Key Features","text":"<ul> <li>Modular CLI: <code>scan</code>, <code>config</code>, <code>plugin</code>, <code>re</code>, <code>clean</code></li> <li><code>.gittxtignore</code> support for gitignore-style filtering</li> <li>Lite vs Rich modes</li> <li>ZIP bundling and manifest/summary outputs</li> <li>Plugin system: FastAPI + Streamlit</li> <li>Hosted Streamlit app with full <code>gittxt scan</code> parity</li> <li>AI-Powered Summary &amp; Chat (OpenAI / Ollama support)</li> <li>Fast, async scanning of large codebases</li> </ul>"},{"location":"#join-the-project","title":"\ud83c\udf10 Join the Project","text":"<ul> <li>GitHub: github.com/sandy-sp/gittxt</li> <li>Discussions: Ask a question</li> <li>Issues: Report a bug</li> </ul> <p>Let\u2019s get started \u2192 Installation Guide</p> <p>Want to know how Gittxt was born and why it exists? \ud83d\udcd6 Read the full story \u2192 About Gittxt</p>"},{"location":"about/","title":"\ud83d\udcd8 About Gittxt","text":"<p>Gittxt is an open-source tool built to bridge the gap between GitHub repositories and Large Language Models (LLMs). It streamlines the process of extracting, structuring, and preparing code and documentation for AI consumption.</p>"},{"location":"about/#meet-the-developer","title":"\ud83e\uddd1\u200d\ud83d\udcbb Meet the Developer","text":"<p>Created by Sandeep Paidipati, an early adopter of AI and open-source tools.</p> <p>\"As someone who started exploring LLMs the moment they became public in 2022, I quickly ran into a common bottleneck: getting code or documentation into the right format for different AI tools. Some LLMs prefer <code>.txt</code>, others <code>.json</code>, and some won't even accept <code>.md</code>. Sharing GitHub repos with an LLM often felt like a formatting nightmare.</p> <p>I realized that what I needed\u2014and what many others probably needed\u2014was a way to compile all the usable content from a GitHub repo into a clean, consistent format that any LLM could ingest.</p> <p>That's how Gittxt was born. A utility that started as a simple script and evolved into a full-featured tool to help developers, researchers, and AI tinkerers extract the right text, fast.\"</p> <p>Let's connect: LinkedIn \u2192</p> <p>Currently open to work and collaborations on AI, devtools, and open-source projects.</p>"},{"location":"about/#vision-goals","title":"\u2728 Vision &amp; Goals","text":"<p>Gittxt aims to become the go-to bridge between open-source code and LLMs:</p> <ul> <li>LLM Compatibility First: Tailor repository data for frictionless use with tools like ChatGPT, Claude, Gemini, and Ollama.</li> <li>One File, Many Uses: Compile all relevant content into <code>.txt</code>, <code>.json</code>, or <code>.md</code>\u2014whichever works best with your AI tool.</li> <li>Empower Developers: Save hours of manual prep with automated filters, formatters, and bundlers.</li> <li>Promote OSS &amp; Reusability: Make it easy to share GitHub projects with AI agents, even in low-resource or free-tier environments.</li> </ul>"},{"location":"about/#what-gittxt-does","title":"\ud83d\ude80 What Gittxt Does","text":"<ul> <li>\ud83d\udd0d Scans GitHub or local repositories</li> <li>\ud83d\udcc1 Filters and classifies files (textual, non-textual, skipped)</li> <li>\ud83e\udde0 Prepares structured outputs for LLM ingestion</li> <li>\ud83d\udcac Supports AI summaries &amp; chat with OpenAI/Ollama models</li> <li>\ud83d\udce6 Bundles everything into a ZIP for portability</li> </ul> <p>Supports: - CLI tools - Plugins (FastAPI, Streamlit UI) - Reverse engineering from <code>.txt</code>, <code>.json</code>, or <code>.md</code> reports</p>"},{"location":"about/#how-you-can-support","title":"\ud83d\ude4f How You Can Support","text":"<p>Gittxt is built and maintained by a solo developer passionate about building useful tools for the AI and open-source community.</p> <p>If you find value in this tool and would like to support ongoing development: - \u2b50\ufe0f Star the repo on GitHub - \ud83e\uddf5 Share it with your network - \ud83e\udd1d Reach out to sponsor or collaborate</p> <p>Let's make AI workflows more open, accessible, and efficient\u2014together.</p>"},{"location":"app/","title":"App","text":""},{"location":"app/#gittxt-web-scanner","title":"\ud83e\uddd1\u200d\ud83d\udcbb Gittxt Web Scanner","text":"<p>A static page that mimics the Streamlit plugin, powered by AWS Lambda. Below is an HTML-based form for scanning GitHub repositories with Gittxt. The heavy lifting is handled by a backend AWS Lambda function.</p> GitHub Repository Scanner Repository URL Branch (optional) Include Patterns Exclude Patterns Exclude Directories Max File Size (MB) Tree Depth Lite Mode Skip Tree Use .gittxtignore Docs Only Create ZIP Bundle Scan <pre>Result will appear here...</pre>"},{"location":"changelog/","title":"\ud83d\udcdc Changelog","text":"<p>All notable changes to Gittxt are documented here.</p> <p>We follow Semantic Versioning \u2014 breaking changes increase the major version, enhancements increase the minor, and bug fixes increase the patch.</p>"},{"location":"changelog/#177-2025-04-14","title":"[1.7.7] \u2013 2025-04-14","text":""},{"location":"changelog/#streamlit-app-now-fully-functional","title":"\ud83d\ude80 Streamlit App Now Fully Functional","text":"<ul> <li>The Gittxt Streamlit plugin is now production-ready, matching the full capabilities of the <code>gittxt</code> CLI tool.</li> <li>\u2705 Seamless support for <code>--docs</code>, <code>--lite</code>, <code>--zip</code>, <code>--tree-depth</code>, <code>.gittxtignore</code>, and advanced filters.</li> <li>\ud83d\udce5 Outputs include <code>.txt</code>, <code>.md</code>, <code>.json</code>, and optional ZIP bundles \u2014 downloadable directly via the UI.</li> <li>\ud83d\udcca Interactive summary panels show token estimates, file types, and skipped files.</li> <li>\ud83d\udce6 Results are parsed from CLI-generated JSON output to ensure parity and future-proofing.</li> </ul>"},{"location":"changelog/#ui-enhancements","title":"\ud83c\udf9b\ufe0f UI Enhancements","text":"<ul> <li>All scan filters now centralized in a clean, two-column layout.</li> <li>Humanized file size slider (MB) replaces byte input for better UX.</li> <li>Sidebar branding finalized with dark theme and Gittxt logo.</li> <li>Navigation between \u201cScan Repository\u201d and \u201cAI Summary\u201d now persistent via <code>st.session_state</code>.</li> </ul>"},{"location":"changelog/#refactor-cleanup","title":"\ud83d\udee0\ufe0f Refactor &amp; Cleanup","text":"<ul> <li>Internals modularized into <code>scan/</code> and <code>ai/</code> subfolders.</li> <li>Removed direct internal imports \u2014 now powered via CLI execution for robustness.</li> <li>Session-aware cleanup ensures temporary outputs and chat state are deleted between runs.</li> </ul>"},{"location":"changelog/#ai-summary-early-access","title":"\ud83e\udde0 AI Summary (Early Access)","text":"<ul> <li>The AI-based repo summarizer and chat remain in beta.</li> <li>Token-aware chunking and basic error handling added, but some LLM bugs persist.</li> </ul>"},{"location":"changelog/#176-2025-04-13","title":"[1.7.6] - 2025-04-13","text":""},{"location":"changelog/#features","title":"\u2728 Features","text":"<ul> <li>Added <code>--docs</code> CLI flag to scan only Markdown documentation files (<code>*.md</code>) when <code>--include-patterns</code> is not specified.</li> <li>Introduced <code>--no-tree</code> flag to omit directory tree from all output formats (<code>.txt</code>, <code>.md</code>, <code>.json</code>).</li> </ul>"},{"location":"changelog/#improvements","title":"\ud83d\udee0 Improvements","text":"<ul> <li>Reverse engineering now tolerates <code>.json</code>, <code>.md</code>, and <code>.txt</code> reports created with <code>--lite</code> or <code>--no-tree</code>.</li> <li>CLI warns if tree summary or assets are missing from the report.</li> </ul>"},{"location":"changelog/#cleanup","title":"\ud83e\uddf9 Cleanup","text":"<ul> <li>Isolated plugin dependencies into <code>requirements.txt</code> inside each plugin folder (<code>gittxt-api</code>, <code>gittxt-streamlit</code>).</li> <li><code>gittxt plugin run</code> now installs dependencies before launching plugins.</li> <li>Keeps core CLI tool lightweight and avoids unnecessary installations.</li> </ul>"},{"location":"changelog/#175-2025-04-12","title":"[1.7.5] - 2025-04-12","text":""},{"location":"changelog/#documentation","title":"\ud83d\udcdd Documentation","text":"<ul> <li>Refreshed <code>README.md</code> to align with v1.7.x features and structure</li> <li>Linked new MkDocs documentation site in relevant sections</li> <li>Added dedicated sections for <code>clean</code>, <code>plugin</code>, and <code>reverse</code> commands</li> <li>Updated usage examples to reflect real CLI behavior and ZIP bundling logic</li> </ul>"},{"location":"changelog/#features_1","title":"\ud83d\ude80 Features","text":"<ul> <li>Introduced full plugin system section in README (API + Streamlit)</li> <li>Included reverse engineering usage and documentation highlights</li> <li>Clarified usage of <code>.gittxtignore</code>, <code>--lite</code>, and <code>--zip</code> modes in examples</li> </ul>"},{"location":"changelog/#cleanup_1","title":"\ud83e\uddf9 Cleanup","text":"<ul> <li>Removed outdated references to legacy usage docs (<code>docs/USAGE_EXAMPLES.md</code>)</li> <li>Refactored README badges, headings, and feature descriptions for consistency</li> </ul>"},{"location":"changelog/#174-2025-04-11","title":"[1.7.4] - 2025-04-11","text":""},{"location":"changelog/#documentation_1","title":"\ud83d\udcda Documentation","text":"<ul> <li>Complete rewrite and reorganization of project documentation into MkDocs structure</li> <li>Added structured pages for CLI reference, plugin usage, API endpoints, and reverse engineering</li> </ul>"},{"location":"changelog/#streamlit-app","title":"\ud83c\udf10 Streamlit App","text":"<ul> <li>Introduced <code>gittxt_streamlit</code> plugin</li> <li>Enables a visual UI for scanning GitHub repos</li> <li>Features file previews, summary rendering, and ZIP downloads</li> </ul>"},{"location":"changelog/#173-2025-04-11","title":"[1.7.3] - 2025-04-11","text":""},{"location":"changelog/#features_2","title":"\u2728 Features","text":"<ul> <li>Introduced plugin management commands in the CLI:</li> <li><code>gittxt plugin list</code> to view available plugins.</li> <li><code>gittxt plugin install &lt;plugin_name&gt;</code> to install plugins.</li> <li><code>gittxt plugin uninstall &lt;plugin_name&gt;</code> to remove plugins.</li> <li><code>gittxt plugin run &lt;plugin_name&gt;</code> to execute installed plugins.</li> <li>Added <code>gittxt_api</code> plugin for running a FastAPI server:</li> <li>Provides endpoints for scanning repositories, uploading ZIP files, and retrieving summaries.</li> <li>Includes routes for cleanup, artifact downloads, and reverse engineering.</li> </ul>"},{"location":"changelog/#improvements_1","title":"\ud83d\udee0 Improvements","text":"<ul> <li>Enhanced <code>gittxt_api</code> plugin with:</li> <li>CORS middleware for cross-origin requests.</li> <li>Health check endpoint (<code>/health</code>) to verify API status.</li> <li>Docker support with <code>Dockerfile</code> and <code>docker-compose.yml</code> for easy deployment.</li> <li>Improved CLI integration with plugins, allowing seamless management and execution.</li> </ul>"},{"location":"changelog/#tests","title":"\ud83e\uddea Tests","text":"<ul> <li>Added test coverage for plugin installation, uninstallation, and execution.</li> <li>Verified API endpoints for <code>gittxt_api</code> plugin, including scan, upload, and summary retrieval.</li> </ul>"},{"location":"changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed issues with plugin path resolution in the CLI.</li> <li>Resolved minor logging inconsistencies in <code>gittxt_api</code> plugin.</li> </ul>"},{"location":"changelog/#172","title":"[1.7.2]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New CLI command: <code>gittxt re</code> to reverse engineer source files from <code>.txt</code>, <code>.md</code>, or <code>.json</code> reports.</li> <li>Added <code>reverse_engineer.md</code> doc page and MkDocs nav entry.</li> </ul>"},{"location":"changelog/#170-2025-04-03","title":"[1.7.0] - 2025-04-03","text":""},{"location":"changelog/#config-logging-enhancements","title":"\ud83e\udde0 Config &amp; Logging Enhancements","text":"<ul> <li>Config file now stored in <code>src/gittxt/</code> (not <code>config/</code>)</li> <li>Log file uses a rotating handler and supports formats: <code>plain</code>, <code>json</code>, <code>colored</code></li> <li>Installer updated to use <code>ConfigManager</code> correctly</li> </ul>"},{"location":"changelog/#cli-restructure","title":"\u2699\ufe0f CLI Restructure","text":"<ul> <li>Combined <code>cli_install.py</code> + <code>cli_filters.py</code> \u2192 <code>cli_config.py</code></li> <li>New subcommands:</li> <li><code>gittxt config install</code></li> <li><code>gittxt config filters</code></li> </ul>"},{"location":"changelog/#formatter-fixes","title":"\ud83d\udce6 Formatter Fixes","text":"<ul> <li><code>.strip()</code> bug fixed in <code>text_formatter.py</code></li> <li>Markdown links corrected for non-textual assets</li> </ul>"},{"location":"changelog/#scanner-improvements","title":"\ud83e\uddf9 Scanner Improvements","text":"<ul> <li>Auto-detect default GitHub branch</li> <li>Logs summary: accepted/skipped/non-textual files</li> <li>Warning added when no textual files match filters</li> </ul>"},{"location":"changelog/#160-2025-03-31","title":"[1.6.0] - 2025-03-31","text":""},{"location":"changelog/#features_3","title":"\u2728 Features","text":"<ul> <li><code>--lite</code> mode for minimal output</li> <li><code>--zip</code> option to bundle outputs/assets</li> <li>Full async I/O for scanning and formatting</li> <li><code>.gittxtignore</code> support (gitignore-style exclusions)</li> <li>Token counts, file-type breakdowns, and tree summaries in report</li> </ul>"},{"location":"changelog/#improvements_2","title":"\ud83d\udee0 Improvements","text":"<ul> <li>CLI modularized into <code>cli_scan.py</code>, <code>cli_utils.py</code>, etc.</li> <li>Directory tree generator supports symlinks and depth config</li> <li>Formatter consistency across all modes</li> <li>ZIP bundles include <code>manifest.json</code>, <code>summary.json</code></li> <li>MIME fallback detection improved in <code>filetype_utils.py</code></li> </ul>"},{"location":"changelog/#tests_1","title":"\ud83e\uddea Tests","text":"<ul> <li>Expanded test coverage: formatters, <code>.gittxtignore</code>, glob filters</li> <li>CLI tests updated for modular CLI structure</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Path resolution bugs in formatters</li> <li>Missing branch errors handled during scan</li> <li>Fixed bundle paths escaping root directory</li> <li>Improved logging for skipped file reasons</li> </ul>"},{"location":"changelog/#cleanup_2","title":"\ud83e\uddf9 Cleanup","text":"<ul> <li>Removed deprecated <code>--max-lines</code></li> <li>Cleaned logging and redundant utils</li> </ul>"},{"location":"changelog/#159-2025-03-29","title":"[1.5.9] - 2025-03-29","text":""},{"location":"changelog/#features_4","title":"\u2728 Features","text":"<ul> <li>Introduced <code>--lite</code>, <code>--zip</code></li> <li>Full async file reads</li> <li>Output includes summary metadata</li> </ul>"},{"location":"changelog/#improvements_3","title":"\ud83d\udee0 Improvements","text":"<ul> <li>Directory tree generator now more robust</li> <li>Markdown and JSON formatters handle empty asset sections</li> <li>Filetype heuristics + async MIME support</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li><code>.resolve()</code> issues in formatters</li> <li>Crash handling for invalid repo/branch</li> <li>Relative path logic fixed for ZIP</li> </ul>"},{"location":"changelog/#150-2024-12-20","title":"[1.5.0] - 2024-12-20","text":"<p>\ud83c\udf89 Initial public release!</p> <ul> <li>Scan local + remote repos</li> <li>Extract structured <code>.txt</code>, <code>.json</code>, <code>.md</code></li> <li>Token estimates and directory tree</li> <li>Extension-based file filtering</li> </ul>"},{"location":"api-reference/","title":"\ud83d\udce1 API Reference Overview","text":"<p>The Gittxt API Plugin provides a versioned RESTful interface for scanning GitHub repositories, uploading ZIP archives, and retrieving results programmatically. All routes are prefixed under <code>/v1</code>.</p> <p>This section documents the available endpoints, input models, and expected responses.</p>"},{"location":"api-reference/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Launch the API server: <pre><code>gittxt plugin run gittxt-api\n</code></pre></p> <p>Then open: <pre><code>http://localhost:8000/docs\n</code></pre> This provides Swagger UI for all endpoints.</p>"},{"location":"api-reference/#available-endpoints","title":"\ud83d\udd27 Available Endpoints","text":"Method Path Purpose <code>GET</code> <code>/v1/health</code> Check API status <code>POST</code> <code>/v1/inspect</code> Preview a repo (no outputs saved) <code>POST</code> <code>/v1/scan</code> Full repo scan with output generation <code>POST</code> <code>/v1/upload</code> Upload ZIP archive to scan <code>GET</code> <code>/v1/download/{scan_id}?format=txt|json|md|zip</code> Download artifact <code>GET</code> <code>/v1/summary/{scan_id}</code> View scan summary (JSON) <code>DELETE</code> <code>/v1/cleanup/{scan_id}</code> Delete output artifacts by scan ID"},{"location":"api-reference/#scan-id","title":"\ud83d\udd11 Scan ID","text":"<p>Every successful scan or upload returns a <code>scan_id</code>, which you can use to: - Download results in various formats - View summary data - Cleanup temporary or saved files</p>"},{"location":"api-reference/#output-format","title":"\ud83d\udce6 Output Format","text":"<p>Scan results are saved to a unique directory inside your configured <code>OUTPUT_DIR</code> and returned in: - <code>.txt</code>, <code>.json</code>, <code>.md</code> - <code>.zip</code> bundles (if <code>create_zip=true</code>)</p>"},{"location":"api-reference/#cors-security-notes","title":"\ud83d\udd10 CORS &amp; Security Notes","text":"<ul> <li>CORS is enabled for all origins (suitable for local or frontend integration)</li> <li>Consider implementing API key authentication in production</li> <li>All endpoints return structured <code>ApiResponse</code> objects with timestamp</li> </ul>"},{"location":"api-reference/#response-schema-highlights","title":"\ud83d\udcca Response Schema Highlights","text":""},{"location":"api-reference/#apiresponse","title":"<code>ApiResponse</code>","text":"<pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Scan completed successfully\",\n  \"data\": { ... },\n  \"timestamp\": \"2025-04-17T18:00:00Z\"\n}\n</code></pre>"},{"location":"api-reference/#errorresponse","title":"<code>ErrorResponse</code>","text":"<pre><code>{\n  \"status\": \"error\",\n  \"error\": \"Validation Error\",\n  \"detail\": \"...\",\n  \"timestamp\": \"2025-04-17T18:00:00Z\"\n}\n</code></pre> <p>Next: Inspect Endpoint \u27a1</p>"},{"location":"api-reference/inspect-endpoint/","title":"\ud83d\udd0d Inspect Endpoint","text":"<p>The <code>/v1/inspect</code> endpoint provides a lightweight preview of any GitHub or local repo.</p> <p>Unlike <code>/scan</code>, this does not write outputs to disk or return ZIP bundles \u2014 it is intended for real-time frontend previews or quick backend checks.</p>"},{"location":"api-reference/inspect-endpoint/#endpoint","title":"\u2705 Endpoint","text":"<pre><code>POST /v1/inspect\n</code></pre>"},{"location":"api-reference/inspect-endpoint/#request-body","title":"\ud83e\uddfe Request Body","text":"<pre><code>{\n  \"repo_path\": \"https://github.com/user/repo\",\n  \"branch\": \"main\",\n  \"exclude_dirs\": [\"tests\", \"node_modules\"],\n  \"include_patterns\": [\"**/*.py\"],\n  \"exclude_patterns\": [\"*.log\"]\n}\n</code></pre>"},{"location":"api-reference/inspect-endpoint/#fields","title":"Fields","text":"<ul> <li><code>repo_path</code> (required): Local path or GitHub URL</li> <li><code>branch</code> (optional): Defaults to <code>main</code></li> <li><code>exclude_dirs</code> (optional): Folders to skip</li> <li><code>include_patterns</code> / <code>exclude_patterns</code>: Glob filters to include/exclude</li> </ul>"},{"location":"api-reference/inspect-endpoint/#response-example","title":"\ud83d\udce6 Response Example","text":"<p>Returns a summary and file listing without writing anything to disk:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Preview completed\",\n  \"data\": {\n    \"repository\": {\n      \"name\": \"repo\",\n      \"branch\": \"main\",\n      \"tree_summary\": \"...\"\n    },\n    \"summary\": {\n      \"total_files\": 8,\n      \"estimated_tokens\": 3000,\n      \"formatted\": {\n        \"total_size\": \"28.1 kB\",\n        \"estimated_tokens\": \"3k\"\n      }\n    },\n    \"files\": [\n      {\n        \"path\": \"src/main.py\",\n        \"subcategory\": \"code\",\n        \"tokens_estimate\": 1100,\n        \"url\": \"https://github.com/user/repo/blob/main/src/main.py\"\n      },\n      ...\n    ]\n  },\n  \"timestamp\": \"2025-04-17T19:00:00Z\"\n}\n</code></pre>"},{"location":"api-reference/inspect-endpoint/#use-cases","title":"\ud83e\udde0 Use Cases","text":"<ul> <li>Live UI previews (before committing to a scan)</li> <li>Filter previews: let users choose patterns/directories dynamically</li> <li>Zero-write environments (e.g. sandboxed or ephemeral containers)</li> </ul> <p>Back: API Overview</p>"},{"location":"cli-reference/","title":"\ud83d\udcbb CLI Reference Overview","text":"<p>The Gittxt CLI is organized into multiple subcommands, each focused on a specific task. This section provides an overview of all available commands.</p>"},{"location":"cli-reference/#core-cli-commands","title":"\ud83d\udce6 Core CLI Commands","text":"Command Description <code>scan</code> Scan a local or remote repository and generate outputs <code>config</code> Configure default settings, filters, and paths <code>clean</code> Remove previous scan outputs from the output directory <code>re</code> Reverse engineer a Gittxt report back into source files <code>plugin</code> Manage and run optional Gittxt plugins <p>Each command has its own set of flags and options, documented in the following pages:</p>"},{"location":"cli-reference/#subcommand-docs","title":"\ud83d\udcd8 Subcommand Docs","text":"<ul> <li>Scan \u27a1: Run a repository scan</li> <li>Config \u27a1: Install config, manage filters</li> <li>Clean \u27a1: Remove old outputs</li> <li>Reverse \u27a1: Rebuild source code from a report</li> <li>Plugin \u27a1: List, install, run optional plugins</li> </ul>"},{"location":"cli-reference/#help-command","title":"\ud83c\udd98 Help Command","text":"<p>Use <code>--help</code> with any command to view inline help:</p> <pre><code>gittxt scan --help\ngittxt config filters --help\n</code></pre> <p>Next: Scan Command \u27a1</p>"},{"location":"cli-reference/clean/","title":"\ud83e\uddf9 <code>gittxt clean</code> Command","text":"<p>The <code>clean</code> command removes previous output files from your configured output directory. It's helpful when resetting the environment between scans.</p>"},{"location":"cli-reference/clean/#syntax","title":"\u2705 Syntax","text":"<pre><code>gittxt clean [OPTIONS]\n</code></pre>"},{"location":"cli-reference/clean/#options","title":"\u2699\ufe0f Options","text":"Flag Description <code>-o</code>, <code>--output-dir</code> Target a specific directory (optional) <p>If no <code>--output-dir</code> is provided, Gittxt will use the value from <code>gittxt-config.json</code>.</p>"},{"location":"cli-reference/clean/#what-it-cleans","title":"\ud83e\uddfd What It Cleans","text":"<p>Removes these subdirectories: - <code>txt/</code> - <code>json/</code> - <code>md/</code> - <code>zip/</code> - <code>temp/</code> - <code>reverse/</code></p> <p>Example: <pre><code>gittxt clean -o ~/gittxt-output\n</code></pre></p>"},{"location":"cli-reference/clean/#use-case","title":"\ud83e\udde0 Use Case","text":"<p>Run this before a fresh scan to: - Prevent mixups with stale files - Save disk space - Reset directory structure</p> <p>Back: Config | Next: Reverse \u27a1</p>"},{"location":"cli-reference/config/","title":"\u2699\ufe0f <code>gittxt config</code> Command","text":"<p>The <code>config</code> command is used to manage Gittxt's configuration settings, including output preferences, logging behavior, and file filtering.</p>"},{"location":"cli-reference/config/#syntax","title":"\u2705 Syntax","text":"<pre><code>gittxt config [SUBCOMMAND]\n</code></pre>"},{"location":"cli-reference/config/#subcommands","title":"\ud83d\udee0 Subcommands","text":""},{"location":"cli-reference/config/#install","title":"<code>install</code>","text":"<p>Launches an interactive configuration wizard: <pre><code>gittxt config install\n</code></pre> You\u2019ll be prompted to: - Choose output directory - Select default output formats - Set logging level - Enable auto-ZIP - Manage file filters</p>"},{"location":"cli-reference/config/#filters","title":"<code>filters</code>","text":"<p>Manage file and folder filters used during scans.</p> <p><pre><code>gittxt config filters list\n</code></pre> View current filters.</p> <p><pre><code>gittxt config filters add textual_exts .ipynb\n</code></pre> Add new extensions to a filter category.</p> <p><pre><code>gittxt config filters remove non_textual_exts .csv\n</code></pre> Remove extensions from filters.</p> <p><pre><code>gittxt config filters clear\n</code></pre> Clear all filters.</p> <p>Supported filter types: - <code>textual_exts</code> - <code>non_textual_exts</code> - <code>excluded_dirs</code></p>"},{"location":"cli-reference/config/#where-config-is-stored","title":"\ud83d\udcdd Where Config is Stored","text":"<p>Configuration is saved to: <pre><code>src/gittxt/gittxt-config.json\n</code></pre> You can edit this file manually or use the CLI.</p>"},{"location":"cli-reference/config/#tips","title":"\ud83d\udcd8 Tips","text":"<ul> <li>Filters affect which files are scanned or skipped</li> <li>Use <code>--log-level debug</code> with <code>gittxt scan</code> to see config details</li> <li>Settings persist across scans unless overridden via CLI flags</li> </ul> <p>Back: Scan | Next: Clean \u27a1</p>"},{"location":"cli-reference/plugin/","title":"\ud83d\udd0c <code>gittxt plugin</code> Command","text":"<p>The <code>plugin</code> command allows you to list, install, run, and uninstall Gittxt extensions like the API server or Streamlit UI.</p>"},{"location":"cli-reference/plugin/#syntax","title":"\u2705 Syntax","text":"<pre><code>gittxt plugin [subcommand] &lt;plugin_name&gt;\n</code></pre>"},{"location":"cli-reference/plugin/#subcommands","title":"\ud83d\udccb Subcommands","text":"Command Description <code>list</code> List all available plugins and their install status <code>install &lt;plugin&gt;</code> Install a plugin from a local template <code>run &lt;plugin&gt;</code> Launch the plugin (installs dependencies automatically) <code>uninstall &lt;plugin&gt;</code> Remove the plugin folder"},{"location":"cli-reference/plugin/#dependency-management","title":"\ud83e\uddf0 Dependency Management","text":"<p>Each plugin manages its own dependencies via a <code>requirements.txt</code> file:</p> <pre><code>plugins/gittxt-api/requirements.txt\nplugins/gittxt-streamlit/requirements.txt\n</code></pre> <p>When you run a plugin using:</p> <pre><code>gittxt plugin run gittxt-api\n</code></pre> <p>The tool: 1. Checks for the plugin folder. 2. Installs dependencies from <code>requirements.txt</code>. 3. Launches the plugin using the specified run command.</p> <p>This keeps the core CLI lightweight and free of plugin-specific dependencies like FastAPI or Streamlit.</p>"},{"location":"cli-reference/plugin/#plugin-paths","title":"\ud83d\udcc1 Plugin Paths","text":"<p>Plugins are located inside the project under:</p> <pre><code>plugins/\n\u251c\u2500\u2500 gittxt_api/\n\u251c\u2500\u2500 gittxt_streamlit/\n</code></pre> <p>Each plugin contains its own app files and configuration.</p>"},{"location":"cli-reference/plugin/#notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li>CLI warns if a plugin is already installed or missing.</li> <li>Installed plugins are sandboxed to the project directory.</li> </ul>"},{"location":"cli-reference/plugin/#example","title":"\ud83e\uddea Example","text":"<pre><code>gittxt plugin list\ngittxt plugin install gittxt-api\ngittxt plugin run gittxt-api\n</code></pre> <p>Back: Reverse</p>"},{"location":"cli-reference/re/","title":"\ud83d\udd01 <code>gittxt re</code> Command","text":"<p>The <code>re</code> (reverse) command reconstructs the original repository structure from a Gittxt output report. This is useful when you only have <code>.txt</code>, <code>.md</code>, or <code>.json</code> exports and need the original source code files.</p>"},{"location":"cli-reference/re/#syntax","title":"\u2705 Syntax","text":"<pre><code>gittxt re &lt;report_file&gt; [--output-dir &lt;folder&gt;]\n</code></pre>"},{"location":"cli-reference/re/#description","title":"\ud83d\udccb Description","text":"<ul> <li>Accepts <code>.txt</code>, <code>.md</code>, or <code>.json</code> reports generated by Gittxt.</li> <li>Extracts all reconstructable files and places them into a structured ZIP archive.</li> <li>Supports reports created with <code>--lite</code>, <code>--no-tree</code>, or partial content.</li> </ul>"},{"location":"cli-reference/re/#input","title":"\ud83d\udcc4 Input","text":"<p>Supported input formats: - <code>.json</code> (recommended) - <code>.txt</code> - <code>.md</code></p> <p>Each must follow Gittxt's output structure.</p>"},{"location":"cli-reference/re/#output","title":"\ud83d\udce6 Output","text":"<p>Creates a ZIP archive containing the reconstructed project.</p>"},{"location":"cli-reference/re/#output-structure","title":"Output Structure","text":"<p>The resulting ZIP includes: - All reconstructed text files - Folder structure based on available report data</p>"},{"location":"cli-reference/re/#limitations-warnings","title":"\u26a0\ufe0f Limitations &amp; Warnings","text":"<ul> <li>If the input report used <code>--no-tree</code>, the directory tree may be incomplete.</li> <li>If the report used <code>--lite</code>, asset metadata and some structure may be missing.</li> <li>File content must be intact in the report.</li> </ul> <p>Warnings shown in CLI:</p> <pre><code>\u26a0\ufe0f Note: This report did not include a directory tree. Reconstructed structure may be limited.\n\u26a0\ufe0f Note: No non-textual assets were included in this report.\n</code></pre>"},{"location":"cli-reference/re/#example","title":"\ud83e\uddea Example","text":"<pre><code>gittxt re reports/project.json -o ./restored\n</code></pre> <p>Creates: <code>project_reconstructed_&lt;timestamp&gt;.zip</code> under the default or specified <code>--output-dir</code>.</p>"},{"location":"cli-reference/re/#what-gets-reconstructed","title":"\ud83d\udd0d What Gets Reconstructed","text":"<ul> <li>Files listed in the report</li> <li>Full paths and folder structure</li> <li>Textual content only (no binary files)</li> </ul>"},{"location":"cli-reference/re/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Prefer <code>.json</code> for best reconstruction.</li> <li>Validate output using the tree view or unzip locally.</li> </ul> <p>Back: Clean | Next: Plugin \u27a1</p>"},{"location":"cli-reference/scan/","title":"\ud83d\udef0\ufe0f <code>gittxt scan</code> Command","text":"<p>The <code>scan</code> command is the core entry point for extracting text and metadata from Git repositories or local folders.</p>"},{"location":"cli-reference/scan/#syntax","title":"\u2705 Syntax","text":"<pre><code>gittxt scan [REPO_PATH or URL] [OPTIONS]\n</code></pre> <p>You can scan: - A local path: <code>.</code> or <code>/path/to/repo</code> - A remote GitHub repo: <code>https://github.com/user/repo</code></p>"},{"location":"cli-reference/scan/#key-options","title":"\ud83d\udccb Key Options","text":"Flag Description <code>-o</code>, <code>--output-dir</code> Where to write output files <code>-f</code>, <code>--output-format</code> Comma-separated: <code>txt</code>, <code>json</code>, <code>md</code> <code>--zip</code> Create a ZIP bundle of outputs <code>--lite</code> Minimal output (no metadata) <code>--branch</code> GitHub branch to scan (default: main) <code>--tree-depth</code> Limit tree rendering depth <code>-i</code>, <code>--include-patterns</code> Glob(s) to include <code>-e</code>, <code>--exclude-patterns</code> Glob(s) to exclude <code>-x</code>, <code>--exclude-dir</code> Directory names to exclude <code>--size-limit</code> Skip files larger than N bytes <code>--sync</code> Sync with <code>.gitignore</code> rules <code>--log-level</code> Logging level: <code>debug</code>, <code>info</code>, <code>error</code>, <code>warning</code> <code>--docs</code> Scan only documentation files (<code>*.md</code>) if <code>--include-patterns</code> not set <code>--no-tree</code> Exclude directory tree from output formats"},{"location":"cli-reference/scan/#examples","title":"\ud83d\udd0d Examples","text":""},{"location":"cli-reference/scan/#basic-scan-local","title":"Basic scan (local)","text":"<pre><code>gittxt scan .\n</code></pre>"},{"location":"cli-reference/scan/#remote-github-repo","title":"Remote GitHub repo","text":"<pre><code>gittxt scan https://github.com/user/repo\n</code></pre>"},{"location":"cli-reference/scan/#documentation-only-scan","title":"Documentation-only scan","text":"<pre><code>gittxt scan --docs https://github.com/user/repo\n</code></pre>"},{"location":"cli-reference/scan/#skip-directory-tree","title":"Skip directory tree","text":"<pre><code>gittxt scan --no-tree https://github.com/user/repo\n</code></pre>"},{"location":"cli-reference/scan/#advanced-scan","title":"Advanced scan","text":"<pre><code>gittxt scan . \\\n  -o out \\\n  -f txt,json \\\n  --zip --lite \\\n  -i \"**/*.py\" -e \"tests/**\" \\\n  --size-limit 100000\n</code></pre>"},{"location":"cli-reference/scan/#output-locations","title":"\ud83d\udcc1 Output Locations","text":"<p>Files are created in: <pre><code>&lt;output-dir&gt;/txt/\n&lt;output-dir&gt;/json/\n&lt;output-dir&gt;/md/\n&lt;output-dir&gt;/zip/\n</code></pre> Use <code>--output-dir</code> to change this.</p>"},{"location":"cli-reference/scan/#output-summary","title":"\ud83d\udcca Output Summary","text":"<p>Gittxt prints a terminal summary after scanning: - Total files scanned - Estimated tokens - File type breakdown</p> <p>To see skipped files, run with: <pre><code>--log-level debug\n</code></pre></p> <p>Back: CLI Overview | Next: Config \u27a1\ufe0f</p>"},{"location":"development/code-of-conduct/","title":"\ud83e\udd1d Code of Conduct","text":"<p>Welcome to the Gittxt community!</p> <p>We are committed to creating a respectful, inclusive, and harassment-free space for all contributors. This Code of Conduct outlines our expectations for participants and the consequences of unacceptable behavior.</p>"},{"location":"development/code-of-conduct/#our-pledge","title":"\ud83c\udf1f Our Pledge","text":"<p>We as contributors and maintainers pledge to make participation in our community a respectful and welcoming experience for everyone, regardless of:</p> <ul> <li>Age</li> <li>Body size</li> <li>Disability (visible or invisible)</li> <li>Ethnicity</li> <li>Gender identity and expression</li> <li>Experience level</li> <li>Education</li> <li>Nationality</li> <li>Personal appearance</li> <li>Race</li> <li>Religion</li> <li>Sexual identity and orientation</li> </ul>"},{"location":"development/code-of-conduct/#our-standards","title":"\ud83d\udcac Our Standards","text":"<p>Examples of behavior that contributes to a positive environment:</p> <ul> <li>Being kind and respectful in communication</li> <li>Actively listening and being open to diverse viewpoints</li> <li>Accepting constructive feedback gracefully</li> <li>Helping others in good faith</li> <li>Prioritizing what's best for the community</li> </ul> <p>Examples of unacceptable behavior:</p> <ul> <li>Use of sexualized language or imagery</li> <li>Trolling, insults, or derogatory comments</li> <li>Harassment, public or private</li> <li>Publishing private information (without permission)</li> <li>Disruptive or inappropriate conduct in any space</li> </ul>"},{"location":"development/code-of-conduct/#enforcement","title":"\ud83d\udee0 Enforcement","text":"<p>Community leaders are responsible for clarifying and enforcing this code of conduct. They may remove or edit comments, commits, or contributions that violate these standards.</p>"},{"location":"development/code-of-conduct/#report-violations","title":"\ud83d\udcec Report Violations","text":"<p>If you witness or experience unacceptable behavior, please report it privately:</p> <p>\ud83d\udce7 sandeep.paidipati@gmail.com</p> <p>All reports will be handled with discretion and urgency.</p>"},{"location":"development/code-of-conduct/#enforcement-actions","title":"\ud83d\udccf Enforcement Actions","text":"Level Impact Consequence 1\ufe0f\u20e3 Correction Minor mistake or language Private warning 2\ufe0f\u20e3 Warning Clear violation Temporary interaction restriction 3\ufe0f\u20e3 Temporary Ban Sustained or serious violation Suspension from community spaces 4\ufe0f\u20e3 Permanent Ban Repeated, aggressive behavior Removal from all community interaction"},{"location":"development/code-of-conduct/#scope","title":"\ud83d\udd0d Scope","text":"<p>This code applies to:</p> <ul> <li>All project spaces (GitHub repo, issues, PRs, discussions)</li> <li>External platforms when representing the project (social media, events, etc.)</li> </ul>"},{"location":"development/code-of-conduct/#attribution","title":"\ud83d\udcdd Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant v2.0.</p> <p>Community enforcement guidelines inspired by Mozilla's ladder.</p> <p>Thank you for helping us create a safe, collaborative environment for everyone involved in Gittxt! \ud83d\udc99</p> <p>Back: Contributing</p>"},{"location":"development/contributing/","title":"\ud83d\ude4c Contributing to Gittxt","text":"<p>Thank you for your interest in contributing to Gittxt! This guide outlines how to get started with local development, contribute features or fixes, run tests, and follow coding standards.</p>"},{"location":"development/contributing/#project-structure","title":"\ud83e\udded Project Structure","text":"<pre><code>src/gittxt/           # Core source code\n\u251c\u2500\u2500 cli/              # CLI subcommands\n\u251c\u2500\u2500 core/             # Scanner, repository handler, config, logger\n\u251c\u2500\u2500 formatters/       # Output builders for txt, json, md, zip\n\u251c\u2500\u2500 utils/            # Helper modules (file filters, summarizers)\n\nplugins/              # Optional plugins (e.g., FastAPI, Streamlit)\ntests/                # CLI and API test suite\n</code></pre>"},{"location":"development/contributing/#quickstart","title":"\ud83d\ude80 Quickstart","text":""},{"location":"development/contributing/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/sandy-sp/gittxt.git\ncd gittxt\n</code></pre>"},{"location":"development/contributing/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>poetry install\n</code></pre>"},{"location":"development/contributing/#3-use-editable-mode-recommended-for-dev","title":"3. Use Editable Mode (Recommended for Dev)","text":"<pre><code>poetry install --editable .\n</code></pre>"},{"location":"development/contributing/#4-run-gittxt","title":"4. Run Gittxt","text":"<pre><code>poetry run gittxt scan .\n</code></pre>"},{"location":"development/contributing/#code-quality-and-linting","title":"\u2705 Code Quality and Linting","text":"<p>Before pushing code or submitting a PR, please run:</p> <pre><code>make lint      # Fix issues with ruff\nmake format    # Format with black\nmake check     # Run ruff + black --check + poetry check\n</code></pre> <p>These help enforce: - PEP8 code standards - Auto-fixes for common issues - Consistent formatting and static analysis</p>"},{"location":"development/contributing/#running-tests","title":"\ud83e\uddea Running Tests","text":""},{"location":"development/contributing/#full-suite-cli-api","title":"Full Suite (CLI + API)","text":"<pre><code>make test\n</code></pre>"},{"location":"development/contributing/#only-cli-tests","title":"Only CLI Tests","text":"<pre><code>make cli-tests\n</code></pre>"},{"location":"development/contributing/#only-api-tests","title":"Only API Tests","text":"<pre><code>make api-tests\n</code></pre>"},{"location":"development/contributing/#individual-test-example","title":"Individual Test Example","text":"<pre><code>pytest tests/cli/test_scanner.py::test_scanner_with_include_pattern -v\n</code></pre>"},{"location":"development/contributing/#cleanup-test-outputs","title":"Cleanup Test Outputs","text":"<pre><code>make clean\n</code></pre>"},{"location":"development/contributing/#what-tests-cover","title":"\ud83e\udde0 What Tests Cover","text":"<ul> <li>CLI flags: <code>--zip</code>, <code>--lite</code>, <code>--output-format</code>, include/exclude patterns</li> <li><code>.gittxtignore</code> behavior and override priority</li> <li>ZIP bundle contents + manifest/summary integrity</li> <li>Markdown/JSON/TXT formatter correctness</li> <li>Subdirectory resolution and GitHub repo handling</li> <li>API routes: <code>/scan</code>, <code>/inspect</code>, <code>/upload</code>, <code>/summary</code>, <code>/cleanup</code></li> <li>Reverse engineering from <code>.txt</code>, <code>.md</code>, <code>.json</code> reports</li> <li>Subcategory inference (e.g., code, config, data)</li> </ul> <p>See full Test Suite Docs for structure and coverage.</p>"},{"location":"development/contributing/#working-with-plugins","title":"\ud83d\udd0c Working with Plugins","text":"<p>Plugins live in the <code>plugins/</code> directory and can be managed via: <pre><code>poetry run gittxt plugin run gittxt-api\npoetry run gittxt plugin run gittxt-streamlit\n</code></pre></p>"},{"location":"development/contributing/#build-package-locally","title":"\ud83d\udce6 Build Package Locally","text":"<p><pre><code>make build\n</code></pre> This builds the distribution using Poetry.</p>"},{"location":"development/contributing/#clear-caches","title":"\ud83e\uddf9 Clear Caches","text":"<p><pre><code>make cache\n</code></pre> Removes all <code>__pycache__</code> folders recursively.</p>"},{"location":"development/contributing/#submitting-a-pull-request","title":"\ud83e\uddd1\u200d\ud83d\udcbb Submitting a Pull Request","text":""},{"location":"development/contributing/#1-create-a-feature-branch","title":"1. Create a Feature Branch","text":"<pre><code>git checkout -b feature/your-update\n</code></pre>"},{"location":"development/contributing/#2-follow-conventional-commits","title":"2. Follow Conventional Commits","text":"<p>Example: <pre><code>git commit -m \"feat(cli): add support for --tree-depth\"\n</code></pre></p>"},{"location":"development/contributing/#3-push-and-open-pr","title":"3. Push and Open PR","text":"<pre><code>git push origin feature/your-update\n</code></pre> <ul> <li>Clearly explain what changed</li> <li>Add screenshots or logs if needed</li> <li>Link related issues if applicable</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"\ud83d\udee1 Code of Conduct","text":"<p>Please follow our Code of Conduct in all interactions.</p> <p>Thanks for helping improve Gittxt for the dev and AI community! \u2764\ufe0f</p> <p>Next: - Code of Conduct \u27a1 - Gittxt Test Suite \u27a1</p>"},{"location":"development/tests/","title":"\ud83e\uddea Gittxt Test Suite","text":"<p>This page documents the full test suite for Gittxt, including how tests are structured, executed, and maintained across CLI and API components.</p>"},{"location":"development/tests/#test-directory-structure","title":"\ud83d\udcc1 Test Directory Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 cli/                   # CLI unit &amp; integration tests\n\u2502   \u251c\u2500\u2500 generate_test_repo.py  # Creates edge-case test repos\n\u2502   \u2514\u2500\u2500 test_*.py              # Scanner, filters, formats, ZIP, reverse tests\n\u2502\n\u251c\u2500\u2500 api/                   # FastAPI plugin test coverage\n\u2502   \u251c\u2500\u2500 generate_test_repo.py\n\u2502   \u2514\u2500\u2500 test_endpoints.py\n\u2502\n\u251c\u2500\u2500 Makefile              # Unified test runner and cleaner\n\u2514\u2500\u2500 README.md             # Dev guide for tests\n</code></pre>"},{"location":"development/tests/#how-to-run-tests","title":"\u2705 How to Run Tests","text":""},{"location":"development/tests/#run-all-tests","title":"Run All Tests","text":"<pre><code>make test\n</code></pre>"},{"location":"development/tests/#run-only-cli-tests","title":"Run Only CLI Tests","text":"<pre><code>make cli-tests\n</code></pre>"},{"location":"development/tests/#run-only-api-tests","title":"Run Only API Tests","text":"<pre><code>make api-tests\n</code></pre>"},{"location":"development/tests/#run-a-specific-test","title":"Run a Specific Test","text":"<pre><code>pytest tests/cli/test_scanner.py::test_scanner_with_exclude_pattern -v\n</code></pre>"},{"location":"development/tests/#what-we-test","title":"\ud83e\uddea What We Test","text":""},{"location":"development/tests/#core-cli","title":"Core CLI","text":"<ul> <li><code>test_scanner.py</code>: filters, <code>.gittxtignore</code>, size limits, skipped reasons</li> <li><code>test_output_formats.py</code>: <code>.txt</code>, <code>.json</code>, <code>.md</code> rich output validation</li> <li><code>test_lite_mode.py</code>: ensures lite mode strips metadata</li> <li><code>test_zip_bundle.py</code>: verifies contents of generated ZIP archives</li> <li><code>test_cli_run.py</code>: end-to-end CLI subprocess testing</li> <li><code>test_cli_filters.py</code>: interactive CLI filter updates</li> </ul>"},{"location":"development/tests/#reverse-engineering","title":"Reverse Engineering","text":"<ul> <li><code>test_reverse_engineer.py</code>: reconstructs repos from <code>.txt</code>, <code>.md</code>, <code>.json</code></li> </ul>"},{"location":"development/tests/#api-plugin","title":"API Plugin","text":"<ul> <li><code>test_endpoints.py</code>: tests <code>/health</code>, <code>/scan</code>, <code>/summary</code>, <code>/download</code>, <code>/upload</code>, <code>/cleanup</code></li> </ul>"},{"location":"development/tests/#utilities","title":"Utilities","text":"<ul> <li><code>test_repo_handler.py</code>: GitHub repo resolution, subdir support</li> <li><code>test_formatter_sorting.py</code>: README prioritization in file sorting</li> <li><code>test_subcat_utils.py</code>: sub-category detection (<code>docs</code>, <code>config</code>, <code>code</code>)</li> </ul>"},{"location":"development/tests/#repo-generation-for-tests","title":"\ud83d\udd04 Repo Generation for Tests","text":"<p>Two scripts generate test repositories with realistic edge cases:</p> <ul> <li><code>tests/cli/generate_test_repo.py</code></li> <li><code>tests/api/generate_test_repo.py</code></li> </ul> <p>These include: - Minified JS files - Large files over 5MB - Binary/non-textual content - <code>.gittxtignore</code>-excluded paths - Hidden and extensionless files - Deeply nested folders</p>"},{"location":"development/tests/#cleaning-up","title":"\ud83e\uddfc Cleaning Up","text":"<p>To clean all test-generated content:</p> <pre><code>make clean\n</code></pre> <p>This will remove: - <code>tests/cli/test_repo/</code> - <code>tests/cli/cli_test_outputs/</code> - <code>tests/api/test_repo/</code> - <code>tests/api/test_repo.zip</code></p>"},{"location":"development/tests/#best-practices","title":"\ud83d\udca1 Best Practices","text":"<ul> <li>Run <code>make test</code> before every PR submission.</li> <li>Use <code>--log-level debug</code> with <code>gittxt scan</code> to trace test outputs.</li> <li>Keep <code>.gittxtignore</code> scenarios up to date in <code>generate_test_repo.py</code>.</li> <li>Reverse engineer tests help validate report integrity for <code>.txt</code>, <code>.md</code>, <code>.json</code>.</li> </ul> <p>Need help writing new tests? Open an issue or ping us in GitHub Discussions.</p> <p>Happy testing \ud83d\ude80</p> <p>Back: Contributing</p>"},{"location":"getting-started/installation/","title":"\ud83e\uddf0 Installation Guide","text":"<p>Welcome to Gittxt \u2014 your tool for extracting clean, structured, AI-ready data from Git repositories.</p> <p>This guide will help you install Gittxt in two ways:</p> <ul> <li>\ud83d\udccc Using pip (recommended) for most users</li> <li>\ud83d\udc0d Using Poetry for local development or contributions</li> </ul>"},{"location":"getting-started/installation/#install-via-pypi-recommended","title":"\ud83d\udce6 Install via PyPI (Recommended)","text":"<p>Gittxt is published on PyPI.</p> <pre><code>pip install gittxt\n</code></pre> <p>After installation, you can run:</p> <pre><code>gittxt --help\n</code></pre>"},{"location":"getting-started/installation/#install-for-local-development-poetry","title":"\ud83e\uddea Install for Local Development (Poetry)","text":"<p>This is the preferred method for contributors or developers making local changes.</p>"},{"location":"getting-started/installation/#step-1-clone-the-repo","title":"Step 1: Clone the Repo","text":"<pre><code>git clone https://github.com/sandy-sp/gittxt.git\ncd gittxt\n</code></pre>"},{"location":"getting-started/installation/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code>poetry install\n</code></pre>"},{"location":"getting-started/installation/#step-3-run-gittxt","title":"Step 3: Run Gittxt","text":"<pre><code>poetry run gittxt scan .\n</code></pre> <p>You can also install the CLI globally into your environment: <pre><code>poetry install --editable .\n</code></pre></p>"},{"location":"getting-started/installation/#optional-setup-interactive-configuration","title":"\ud83d\udee0 Optional Setup: Interactive Configuration","text":"<p>To set up a default output directory, formats, filters, and logging options, run:</p> <pre><code>gittxt config install\n</code></pre> <p>This creates a <code>gittxt-config.json</code> file with your preferences.</p>"},{"location":"getting-started/installation/#verify-installation","title":"\ud83e\uddea Verify Installation","text":"<p>Run a basic scan to verify everything is working: <pre><code>gittxt scan . --output-format txt --lite --log-level debug\n</code></pre></p> <p>You should see output directories created and summary info printed to your terminal.</p>"},{"location":"getting-started/installation/#modular-installation-options-poetry","title":"\ud83d\udd27 Modular Installation Options (Poetry)","text":"<p>Gittxt is designed to be lightweight. You can install only what you need:</p>"},{"location":"getting-started/installation/#core-cli-tool-only","title":"\ud83e\udde9 Core CLI Tool Only","text":"<p>This installs the base <code>gittxt</code> CLI without any plugin overhead:</p> <pre><code>poetry install\n</code></pre>"},{"location":"getting-started/installation/#with-plugins-api-streamlit","title":"\ud83d\udd0c With Plugins (API &amp; Streamlit)","text":"<p>If you plan to use the FastAPI backend or Streamlit dashboard:</p> <pre><code>poetry install --with plugins\n</code></pre>"},{"location":"getting-started/installation/#with-dev-tools-for-contributors","title":"\ud83e\uddea With Dev Tools (for contributors)","text":"<p>Install development dependencies (tests, linting, formatting):</p> <pre><code>poetry install --with dev\n</code></pre> <p>You can also combine them:</p> <pre><code>poetry install --with plugins,dev\n</code></pre>"},{"location":"getting-started/installation/#need-help","title":"\ud83d\udcac Need Help?","text":"<p>If you face installation issues: - Open an issue at github.com/sandy-sp/gittxt/issues - Or ask a question in Discussions</p> <p>Next: Quickstart \u27a1</p>"},{"location":"getting-started/quickstart/","title":"\u26a1 Quickstart Guide","text":"<p>Welcome to the Gittxt quickstart! This guide walks you through your first scan using the <code>gittxt</code> CLI.</p> <p>Gittxt lets you extract AI-ready textual datasets from local folders or GitHub repositories in seconds.</p>"},{"location":"getting-started/quickstart/#minimal-scan-local-folder","title":"\ud83d\ude80 Minimal Scan (Local Folder)","text":"<p>If you're in a local Git project folder, run:</p> <pre><code>gittxt scan .\n</code></pre> <p>This will: - Auto-detect textual files - Generate <code>.txt</code> output in the default output directory</p>"},{"location":"getting-started/quickstart/#scan-a-github-repo","title":"\ud83c\udf10 Scan a GitHub Repo","text":"<p>To scan a remote repository:</p> <pre><code>gittxt scan https://github.com/sandy-sp/gittxt\n</code></pre> <p>Use the <code>--branch</code> and <code>--subdir</code> flags to target specific content:</p> <pre><code>gittxt scan https://github.com/sandy-sp/gittxt --branch main --subdir src\n</code></pre>"},{"location":"getting-started/quickstart/#customize-the-output","title":"\ud83d\udee0 Customize the Output","text":"<p>Use CLI options to control output format, zip bundling, lite mode, and filters:</p> <pre><code>gittxt scan . \\\n  --output-format txt,json \\\n  --zip \\\n  --lite \\\n  --include-patterns \"**/*.py\" \"**/*.md\" \\\n  --exclude-patterns \"tests/*\"\n</code></pre> <p>Common options: - <code>--output-dir</code>: Custom location for exports - <code>--output-format</code>: Any of <code>txt</code>, <code>json</code>, <code>md</code> - <code>--zip</code>: Bundle everything in a zip - <code>--lite</code>: Generate minimal reports (no metadata) - <code>--size-limit</code>: Skip large files</p>"},{"location":"getting-started/quickstart/#sample-output-structure","title":"\ud83e\uddfe Sample Output Structure","text":"<p>After scanning, output folders look like this:</p> <pre><code>&lt;output-dir&gt;/\n\u251c\u2500\u2500 txt/\n\u251c\u2500\u2500 json/\n\u251c\u2500\u2500 md/\n\u251c\u2500\u2500 zip/\n\u2502   \u251c\u2500\u2500 &lt;repo-name&gt;.zip\n\u2502   \u2514\u2500\u2500 manifest.json, summary.json\n</code></pre>"},{"location":"getting-started/quickstart/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"getting-started/quickstart/#success-checklist","title":"\u2705 Success Checklist","text":"<ul> <li>[x] CLI shows summary and breakdown</li> <li>[x] <code>.txt</code>, <code>.json</code>, or <code>.md</code> files appear in output dir</li> <li>[x] No errors or skipped files (check logs if needed)</li> </ul>"},{"location":"getting-started/quickstart/#next-steps","title":"\ud83e\udde0 Next Steps","text":"<ul> <li>Learn advanced filters and exclusions in the Scanning Guide</li> <li>Configure project-wide defaults with Configuration</li> </ul> <p>Back: Installation | Forward: User Guide \u27a1</p>"},{"location":"user-guide/output-formats/","title":"\ud83d\udce6 Output Formats","text":"<p>Gittxt supports multiple output formats to suit different use cases \u2014 from human-readable text to machine-parsable JSON. Choose one or more using the <code>--output-format</code> flag.</p>"},{"location":"user-guide/output-formats/#txt-plain-text","title":"\u270d\ufe0f <code>.txt</code> \u2014 Plain Text","text":"<p>A readable report that includes: - Directory tree - Summary - Full content of extracted files - Non-textual asset list (if in rich mode)</p> <p>Lite mode: <pre><code>gittxt scan . --output-format txt --lite\n</code></pre></p>"},{"location":"user-guide/output-formats/#json-machine-readable","title":"\ud83d\udcca <code>.json</code> \u2014 Machine-Readable","text":"<p>Ideal for scripting, APIs, or analysis. Includes: - Structured metadata - Token and size breakdowns - File-level content</p> <p>Rich mode JSON sample: <pre><code>{\n  \"repository\": { ... },\n  \"summary\": { ... },\n  \"files\": [ ... ],\n  \"assets\": [ ... ]\n}\n</code></pre></p> <p>Lite mode includes just <code>path</code> and <code>content</code> for each file.</p>"},{"location":"user-guide/output-formats/#md-markdown","title":"\ud83d\udcd8 <code>.md</code> \u2014 Markdown","text":"<p>Perfect for previewing results in Markdown editors or static sites. Includes: - Directory tree (in fenced code block) - Text file previews - Asset table (rich mode only)</p> <p>Sample: <pre><code>## \ud83d\udcc2 Directory Tree\n```text\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 app.py\n</code></pre> <pre><code>---\n\n## \ud83d\udddc `.zip` \u2014 Bundled Archive\n\nUse `--zip` to package all output formats and non-text assets:\n</code></pre> -YYYYMMDD-HHMMSS.zip \u251c\u2500\u2500 outputs/ \u2502   \u251c\u2500\u2500 repo.txt \u2502   \u251c\u2500\u2500 repo.json \u2502   \u2514\u2500\u2500 repo.md \u251c\u2500\u2500 assets/ \u2502   \u2514\u2500\u2500 image.png \u251c\u2500\u2500 summary.json \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 README.md <pre><code>### manifest.json\nLists files and sizes in the archive.\n\n```json\n[\n  { \"type\": \"output\", \"name\": \"repo.txt\", \"size_human\": \"5.4 kB\" },\n  { \"type\": \"asset\", \"path\": \"assets/image.png\", \"size_human\": \"13.2 kB\" }\n]\n</code></pre>"},{"location":"user-guide/output-formats/#choosing-formats","title":"\u2705 Choosing Formats","text":"<p>Generate multiple formats at once: <pre><code>gittxt scan . --output-format txt,json,md --zip\n</code></pre></p> <p>Combine with: - <code>--lite</code> for summary-only content - <code>--tree-depth</code> to limit tree output</p> <p>Next: Reverse Engineering \u27a1</p>"},{"location":"user-guide/reverse-engineering/","title":"\ud83d\udd01 Reverse Engineering","text":"<p>The <code>gittxt re</code> command allows you to reconstruct source code files from Gittxt-generated reports (<code>.txt</code>, <code>.md</code>, or <code>.json</code>). This is useful when you have a structured summary but not the original repository.</p>"},{"location":"user-guide/reverse-engineering/#supported-formats","title":"\ud83d\udcc2 Supported Formats","text":"<p>You can reverse engineer from any of the following report types: - <code>.txt</code> \u2014 Plain text format - <code>.md</code> \u2014 Markdown summary - <code>.json</code> \u2014 Machine-readable export (most reliable)</p> <p>Reports must follow the Gittxt output structure.</p>"},{"location":"user-guide/reverse-engineering/#usage","title":"\ud83d\ude80 Usage","text":"<pre><code>gittxt re path/to/report.[txt|md|json]\n</code></pre> <p>Optional: <pre><code>--output-dir PATH  # Where to save the reconstructed ZIP\n</code></pre></p>"},{"location":"user-guide/reverse-engineering/#what-happens","title":"\ud83e\udde0 What Happens","text":"<ol> <li>Parses the selected report</li> <li>Extracts file paths and contents</li> <li>Reconstructs full directory structure</li> <li>Saves all files into a ZIP archive</li> </ol>"},{"location":"user-guide/reverse-engineering/#output-example","title":"\u2705 Output Example","text":"<pre><code>Parsing report: project_summary.json\nRestoring 24 files...\nGenerated ZIP archive: project_reconstructed_20250411.zip\n</code></pre>"},{"location":"user-guide/reverse-engineering/#output-structure","title":"\ud83d\udcc1 Output Structure","text":"<pre><code>project_reconstructed_&lt;timestamp&gt;.zip\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 app.py\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 dataset.csv\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"user-guide/reverse-engineering/#limitations","title":"\u26a0\ufe0f Limitations","text":"<ul> <li>Only files included in the original scan will be restored</li> <li>Binary/non-textual files are not recoverable from <code>.txt</code> or <code>.md</code></li> <li>Edited reports may fail to parse</li> <li>If the report was created with --no-tree, the directory tree will be missing from reconstruction.</li> <li>If --lite was used, asset metadata and detailed formatting may be absent.</li> </ul> <p>You may see CLI warnings like: <pre><code>\u26a0\ufe0f Note: This report did not include a directory tree. Reconstructed structure may be limited.\n\u26a0\ufe0f Note: No non-textual assets were included in this report.\n</code></pre></p>"},{"location":"user-guide/reverse-engineering/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Prefer <code>.json</code> for full fidelity</li> <li>Use <code>--lite</code> only if content summaries are sufficient</li> </ul> <p>Back: Output Formats</p>"},{"location":"user-guide/scanning/","title":"\ud83d\udd0d Scanning Repositories","text":"<p>The <code>gittxt scan</code> command is the core of the Gittxt CLI. It extracts structured, AI-ready outputs from local folders or GitHub repositories.</p>"},{"location":"user-guide/scanning/#basic-usage","title":"\ud83d\udce6 Basic Usage","text":"<pre><code>gittxt scan [REPO] [OPTIONS]\n</code></pre> <p>You can provide: - A local path (e.g., <code>.</code>) - A GitHub URL (e.g., <code>https://github.com/sandy-sp/gittxt</code>)</p>"},{"location":"user-guide/scanning/#common-options","title":"\ud83d\udd27 Common Options","text":"Flag Description <code>-o</code>, <code>--output-dir</code> Output location (default: <code>~/Gittxt</code>) <code>-f</code>, <code>--output-format</code> Formats: <code>txt</code>, <code>json</code>, <code>md</code> (comma-separated) <code>--zip</code> Bundle outputs into a <code>.zip</code> archive <code>--lite</code> Generate minimal reports (summary only) <code>-x</code>, <code>--exclude-dir</code> Exclude folder paths <code>-i</code>, <code>--include-patterns</code> Include only specific file globs <code>-e</code>, <code>--exclude-patterns</code> Exclude file globs <code>--sync</code> Sync with <code>.gitignore</code> rules <code>--size-limit</code> Skip files over N bytes <code>--branch</code> Branch name (GitHub repos only) <code>--tree-depth</code> Limit directory tree depth <code>--log-level</code> Logging level: <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> <code>--docs</code> Only scan Markdown docs (e.g. README.md, guides) <code>--no-tree</code> Exclude directory tree section from all output formats"},{"location":"user-guide/scanning/#scan-remote-repositories","title":"\ud83c\udf10 Scan Remote Repositories","text":"<pre><code>gittxt scan https://github.com/sandy-sp/gittxt\n</code></pre> <p>Target a branch or subfolder:</p> <pre><code>gittxt scan https://github.com/sandy-sp/gittxt --branch gh-pages --subdir cli-reference\n</code></pre>"},{"location":"user-guide/scanning/#scan-local-directories","title":"\ud83d\udcc1 Scan Local Directories","text":"<pre><code>gittxt scan . --output-format txt,json\n</code></pre> <p>Exclude directories: <pre><code>gittxt scan . -x node_modules -x tests\n</code></pre></p> <p>Include only Python and Markdown: <pre><code>gittxt scan . -i \"**/*.py\" -i \"**/*.md\"\n</code></pre></p>"},{"location":"user-guide/scanning/#scan-command-examples","title":"\ud83e\uddea Scan Command Examples","text":""},{"location":"user-guide/scanning/#full-scan-with-markdown-and-json-output","title":"Full scan with Markdown and JSON output","text":"<pre><code>gittxt scan https://github.com/sandy-sp/gittxt -f md,json\n</code></pre>"},{"location":"user-guide/scanning/#scan-only-markdown-files","title":"Scan only Markdown files","text":"<pre><code>gittxt scan --docs https://github.com/sandy-sp/gittxt\n</code></pre>"},{"location":"user-guide/scanning/#skip-directory-tree","title":"Skip directory tree","text":"<pre><code>gittxt scan --no-tree https://github.com/sandy-sp/gittxt\n</code></pre>"},{"location":"user-guide/scanning/#minimal-scan","title":"Minimal scan","text":"<pre><code>gittxt scan --lite https://github.com/sandy-sp/gittxt\n</code></pre>"},{"location":"user-guide/scanning/#-","title":"---","text":""},{"location":"user-guide/scanning/#warnings-and-tips","title":"\u26a0\ufe0f Warnings and Tips","text":"<ul> <li><code>--branch</code> is ignored for local paths.</li> <li>If no textual files match the filters, you\u2019ll see a warning.</li> <li>Use <code>--log-level debug</code> to see skipped files and reasons.</li> </ul>"},{"location":"user-guide/scanning/#sample-command","title":"\u2705 Sample Command","text":"<pre><code>gittxt scan https://github.com/sandy-sp/gittxt \\\n  -f txt,json \\\n  --zip \\\n  --lite \\\n  -i \"**/*.py\" \\\n  -e \"tests/**\" \\\n  --log-level info\n</code></pre>"},{"location":"user-guide/scanning/#next-steps","title":"\ud83e\uddea Next Steps","text":"<ul> <li>Learn how to customize scan behavior with Configuration</li> <li>Explore available Output Formats</li> <li>Reverse engineer previous scans with Reverse Engineering</li> </ul> <p>Back: Quickstart</p>"},{"location":"user-guide/configuration/","title":"\u2699\ufe0f Configuration Overview","text":"<p>Gittxt supports multiple layers of configuration to customize scan behavior, output preferences, and file filtering.</p> <p>This page introduces the different configuration mechanisms available. Each one can be used independently or in combination.</p>"},{"location":"user-guide/configuration/#configuration-layers","title":"\ud83d\udd27 Configuration Layers","text":"Method Scope Use Case CLI Flags Per-scan One-off adjustments for format, filters, paths Environment Variables Session-wide Persistent settings across scans Interactive Installer Persistent First-time setup of default preferences <code>.gittxtignore</code> File Per-project Exclude files/directories from scans Filter Manager Persistent Override how Gittxt classifies file types"},{"location":"user-guide/configuration/#configuration-topics","title":"\ud83d\udcd8 Configuration Topics","text":"<p>Gittxt's configuration is broken into the following guides:</p> <ul> <li>CLI Flags: Command-line options like <code>--output-format</code>, <code>--lite</code>, etc.</li> <li>Environment Variables: Customize behavior via <code>GITTXT_*</code> variables.</li> <li>.gittxtignore: Exclude files from a project using a gitignore-style file.</li> <li>Interactive Config Installer: One-time setup for outputs, filters, and logging.</li> <li>Filter Manager: Control classification of file types (textual vs. non-textual).</li> </ul>"},{"location":"user-guide/configuration/#where-config-is-stored","title":"\ud83d\udcc1 Where Config is Stored","text":"<p>The persistent config is saved as:</p> <pre><code>src/gittxt/gittxt-config.json\n</code></pre> <p>This file is created by the installer and can be edited manually if needed.</p>"},{"location":"user-guide/configuration/#view-active-settings","title":"\ud83d\udee0 View Active Settings","text":"<p>Use <code>--log-level debug</code> during scan to see active config values, matched filters, and output paths:</p> <pre><code>gittxt scan . --log-level debug\n</code></pre> <p>Next: CLI Flags \u27a1</p>"},{"location":"user-guide/configuration/cli-flags/","title":"\u2699\ufe0f CLI Flags Reference","text":"<p>Gittxt provides powerful command-line options to control each scan. These flags override environment variables and config files for the duration of a single command.</p>"},{"location":"user-guide/configuration/cli-flags/#general-flags","title":"\ud83e\uddfe General Flags","text":"Flag Description <code>-o</code>, <code>--output-dir</code> Custom output directory for exports <code>-f</code>, <code>--output-format</code> Comma-separated formats: <code>txt</code>, <code>json</code>, <code>md</code> <code>--zip</code> Bundle all outputs into a ZIP archive <code>--lite</code> Generate minimal outputs (summary + raw content only)"},{"location":"user-guide/configuration/cli-flags/#repository-options","title":"\ud83d\udcc1 Repository Options","text":"Flag Description <code>--branch</code> Specify GitHub branch (for remote URLs) <code>--subdir</code> Scan a specific subdirectory of the repo"},{"location":"user-guide/configuration/cli-flags/#filtering-options","title":"\ud83d\udd0d Filtering Options","text":"Flag Description <code>-x</code>, <code>--exclude-dir</code> Exclude directory paths (e.g., <code>node_modules</code>) <code>-i</code>, <code>--include-patterns</code> Include files matching glob patterns <code>-e</code>, <code>--exclude-patterns</code> Exclude files matching glob patterns <code>--docs</code> Scan only Markdown documentation files (*.md) if no include patterns given <code>--size-limit</code> Exclude files larger than specified size (in bytes)"},{"location":"user-guide/configuration/cli-flags/#behavior-summary","title":"\ud83e\udde0 Behavior &amp; Summary","text":"Flag Description <code>--branch</code> GitHub branch to scan (defaults to <code>main</code>) <code>--sync</code> Use <code>.gitignore</code> if present (local only) <code>--log-level</code> Logging verbosity: <code>debug</code>, <code>info</code>, <code>error</code>, <code>warning</code> <code>--no-tree</code> Omit directory tree section from the output formats <code>--tree-depth</code> Restrict tree rendering to N levels"},{"location":"user-guide/configuration/cli-flags/#example","title":"\u2705 Example","text":"<pre><code>gittxt scan . \\\n  -o ./reports \\\n  -f txt,json \\\n  --zip \\\n  --lite \\\n  -x .venv -x __pycache__ \\\n  -i \"**/*.py\" -i \"**/*.md\" \\\n  -e \"*.log\" \\\n  --size-limit 50000 \\\n  --log-level info\n</code></pre> <p>Next: Environment Variables \u27a1</p>"},{"location":"user-guide/configuration/environment-variables/","title":"\ud83c\udf0d Environment Variables","text":"<p>Gittxt supports environment variables to set default behaviors across all CLI invocations. These are useful for setting persistent preferences without editing the config file or passing flags every time.</p>"},{"location":"user-guide/configuration/environment-variables/#common-environment-variables","title":"\u2705 Common Environment Variables","text":"Variable Description Example <code>GITTXT_OUTPUT_DIR</code> Default output directory <code>~/gittxt_reports</code> <code>GITTXT_OUTPUT_FORMAT</code> Default formats <code>txt,json,md</code> <code>GITTXT_LITE_MODE</code> Enable lite mode by default (<code>true</code>/<code>false</code>) <code>true</code> <code>GITTXT_AUTO_ZIP</code> Automatically zip output (<code>true</code>/<code>false</code>) <code>true</code> <code>GITTXT_LOGGING_LEVEL</code> Default logging level <code>debug</code> <code>GITTXT_SIZE_LIMIT</code> Max file size in bytes <code>1000000</code> <code>GITTXT_LOG_FORMAT</code> Logging style: <code>plain</code>, <code>json</code>, or <code>colored</code> <code>json</code>"},{"location":"user-guide/configuration/environment-variables/#how-to-set","title":"\ud83d\udee0 How to Set","text":""},{"location":"user-guide/configuration/environment-variables/#unixmacos-bashzsh","title":"Unix/macOS (bash/zsh)","text":"<pre><code>export GITTXT_OUTPUT_DIR=~/gittxt_reports\nexport GITTXT_OUTPUT_FORMAT=txt,json\n</code></pre>"},{"location":"user-guide/configuration/environment-variables/#add-to-bashrc-zshrc-or-env","title":"Add to <code>.bashrc</code>, <code>.zshrc</code>, or <code>.env</code>","text":"<p>This ensures settings persist across terminal sessions.</p>"},{"location":"user-guide/configuration/environment-variables/#windows-powershell","title":"Windows (PowerShell)","text":"<pre><code>$env:GITTXT_OUTPUT_DIR = \"C:\\\\Users\\\\you\\\\gittxt_reports\"\n</code></pre>"},{"location":"user-guide/configuration/environment-variables/#notes","title":"\ud83d\udcd8 Notes","text":"<ul> <li>CLI flags always override environment variables.</li> <li>If both environment variables and config file are set, environment values take precedence.</li> </ul> <p>Next: .gittxtignore \u27a1</p>"},{"location":"user-guide/configuration/filter-manager/","title":"\ud83e\udde9 Filter Manager","text":"<p>The filter manager lets you explicitly define which file extensions or directories are treated as textual, non-textual, or excluded from scans.</p> <p>This provides fine-grained control beyond default heuristics.</p>"},{"location":"user-guide/configuration/filter-manager/#why-use-it","title":"\ud83e\udde0 Why Use It?","text":"<ul> <li>Override file classifications</li> <li>Add new extensions (e.g., <code>.ipynb</code> as textual)</li> <li>Prevent false positives/negatives in filtering</li> </ul>"},{"location":"user-guide/configuration/filter-manager/#usage","title":"\ud83d\udd27 Usage","text":"<p>View all current filters: <pre><code>gittxt config filters list\n</code></pre></p> <p>Add a file extension: <pre><code>gittxt config filters add textual_exts .ipynb\n</code></pre></p> <p>Remove a non-textual extension: <pre><code>gittxt config filters remove non_textual_exts .csv\n</code></pre></p> <p>Clear all filters: <pre><code>gittxt config filters clear\n</code></pre></p>"},{"location":"user-guide/configuration/filter-manager/#supported-filter-keys","title":"\ud83c\udf9b Supported Filter Keys","text":"Key Description <code>textual_exts</code> File extensions treated as textual <code>non_textual_exts</code> Extensions treated as non-textual <code>excluded_dirs</code> Folder names to ignore globally"},{"location":"user-guide/configuration/filter-manager/#manual-edits","title":"\ud83d\udcdd Manual Edits","text":"<p>You can also modify <code>src/gittxt/gittxt-config.json</code> directly under the <code>filters</code> section:</p> <pre><code>{\n  \"filters\": {\n    \"textual_exts\": [\".py\", \".md\", \".ipynb\"],\n    \"non_textual_exts\": [\".zip\", \".pdf\"],\n    \"excluded_dirs\": [\".git\", \"node_modules\"]\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/filter-manager/#tips","title":"\ud83d\udcd8 Tips","text":"<ul> <li>Conflicting extensions are automatically removed from the opposite group</li> <li>Use <code>--log-level debug</code> to verify how files are classified during scan</li> </ul> <p>Next: Output Formats \u27a1</p>"},{"location":"user-guide/configuration/gittxtignore/","title":"\ud83d\udcc4 Using .gittxtignore","text":"<p>The <code>.gittxtignore</code> file allows you to exclude specific files or directories from a Gittxt scan using gitignore-style syntax. It\u2019s ideal for filtering out logs, binaries, or any content irrelevant to your dataset.</p>"},{"location":"user-guide/configuration/gittxtignore/#location","title":"\ud83d\udccc Location","text":"<p>Place the <code>.gittxtignore</code> file in the root of the repository or folder you plan to scan.</p>"},{"location":"user-guide/configuration/gittxtignore/#how-it-works","title":"\ud83e\udde0 How It Works","text":"<ul> <li>Gittxt reads <code>.gittxtignore</code> patterns before scanning begins.</li> <li>These patterns take precedence over CLI include/exclude patterns.</li> <li>Filters apply only to the current project (not global).</li> </ul>"},{"location":"user-guide/configuration/gittxtignore/#supported-syntax","title":"\u2705 Supported Syntax","text":"<ul> <li>File globs: <code>*.log</code>, <code>*.zip</code></li> <li>Folder exclusions: <code>node_modules/</code>, <code>__pycache__/</code></li> <li>Relative paths: <code>docs/temp.md</code></li> <li>Comments: Lines starting with <code>#</code> are ignored</li> </ul> <pre><code># Ignore logs and temporary files\n*.log\n*.tmp\n\n# Ignore build and test folders\nbuild/\ntests/\n\n# Skip backup markdown files\nREADME_backup.md\n</code></pre>"},{"location":"user-guide/configuration/gittxtignore/#notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li><code>.gittxtignore</code> is not the same as <code>.gitignore</code> (unless you use <code>--sync</code>).</li> <li>You can combine <code>.gittxtignore</code> with CLI options or config settings.</li> </ul>"},{"location":"user-guide/configuration/gittxtignore/#debugging","title":"\ud83d\udd0d Debugging","text":"<p>Use debug mode to view active ignore patterns: <pre><code>gittxt scan . --log-level debug\n</code></pre></p> <p>Next: Interactive Config \u27a1</p>"},{"location":"user-guide/configuration/interactive-config/","title":"\ud83d\udee0 Interactive Configuration","text":"<p>Gittxt offers a built-in installer to guide you through setting up your configuration file. This creates a <code>gittxt-config.json</code> file and stores your preferences for future scans.</p>"},{"location":"user-guide/configuration/interactive-config/#run-the-installer","title":"\ud83d\ude80 Run the Installer","text":"<pre><code>gittxt config install\n</code></pre> <p>You\u2019ll be prompted to define: - \ud83d\udcc1 Output directory - \ud83d\udcc4 Default output formats (e.g., <code>txt</code>, <code>json</code>, <code>md</code>) - \ud83d\udd0a Logging level (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>) - \ud83d\udce6 Auto-ZIP (enable or disable ZIP bundling) - \ud83e\udde9 File filters (textual/non-textual extensions) - \u274c Excluded directories</p>"},{"location":"user-guide/configuration/interactive-config/#where-config-is-stored","title":"\ud83d\udce6 Where Config is Stored","text":"<p>After installation, your preferences are saved to: <pre><code>src/gittxt/gittxt-config.json\n</code></pre> You can edit this file manually or re-run the installer anytime.</p>"},{"location":"user-guide/configuration/interactive-config/#sample-cli-usage-after-install","title":"\u2705 Sample CLI Usage After Install","text":"<p>Once configured, you can run: <pre><code>gittxt scan .\n</code></pre> Without passing extra flags \u2014 your defaults will be used automatically.</p>"},{"location":"user-guide/configuration/interactive-config/#why-use-it","title":"\ud83e\udde0 Why Use It?","text":"<ul> <li>Simplifies CLI usage</li> <li>Creates a persistent setup across sessions</li> <li>Ideal for batch jobs or frequent usage</li> </ul> <p>Next: Filter Manager \u27a1</p>"},{"location":"user-guide/plugins/","title":"\ud83d\udd0c Plugin System Overview","text":"<p>Gittxt supports optional plugins to extend its functionality beyond the CLI.</p> <p>Plugins currently include: - \ud83e\udde0 <code>gittxt-api</code>: FastAPI backend for web/app integrations - \ud83d\udcca <code>gittxt-streamlit</code>: Streamlit UI for interactive scans and downloads, now with full CLI parity and AI Summary support</p>"},{"location":"user-guide/plugins/#how-plugins-work","title":"\u2699\ufe0f How Plugins Work","text":"<p>Each plugin: - Resides under the <code>plugins/</code> directory - Is launched using <code>gittxt plugin run &lt;name&gt;</code> - Can be installed/uninstalled via CLI - Manages its own dependencies via <code>requirements.txt</code></p>"},{"location":"user-guide/plugins/#plugin-lifecycle","title":"\ud83d\ude80 Plugin Lifecycle","text":"<p>You can manage plugins using: <pre><code>gittxt plugin [COMMAND]\n</code></pre></p>"},{"location":"user-guide/plugins/#available-commands","title":"Available Commands:","text":"Command Description <code>list</code> Show available and installed plugins <code>install &lt;name&gt;</code> Install a plugin (from internal template) <code>uninstall &lt;name&gt;</code> Remove a plugin from your system <code>run &lt;name&gt;</code> Launch a plugin (e.g., API server, Streamlit UI)"},{"location":"user-guide/plugins/#example-commands","title":"\ud83e\uddea Example Commands","text":"<pre><code>gittxt plugin list\ngittxt plugin install gittxt-api\ngittxt plugin run gittxt-streamlit\n</code></pre>"},{"location":"user-guide/plugins/#plugin-directory-structure","title":"\ud83d\udee0 Plugin Directory Structure","text":"<p>All plugins live under: <pre><code>plugins/\n\u251c\u2500\u2500 gittxt_api/\n\u251c\u2500\u2500 gittxt_streamlit/\n\u2514\u2500\u2500 ...\n</code></pre> Each plugin is self-contained with: - <code>requirements.txt</code> - Entrypoint script(s) - Localized dependencies</p>"},{"location":"user-guide/plugins/#how-dependency-installation-works","title":"\ud83d\udd27 How Dependency Installation Works","text":"<p>Each plugin has its own <code>requirements.txt</code>, such as: <pre><code>plugins/gittxt-api/requirements.txt\nplugins/gittxt-streamlit/requirements.txt\n</code></pre></p> <p>When you run a plugin like: <pre><code>gittxt plugin run gittxt-streamlit\n</code></pre> Gittxt will: 1. Verify that the plugin is installed 2. Install missing dependencies automatically 3. Launch the plugin from the appropriate working directory</p> <p>\u2705 This design keeps the core CLI lightweight and avoids unnecessary dependencies.</p>"},{"location":"user-guide/plugins/#safe-defaults","title":"\ud83d\udd12 Safe Defaults","text":"<ul> <li>All plugin paths are sandboxed inside the project repo</li> <li>No external fetching is done unless plugins are manually added</li> <li>Dependency installation is local to the plugin scope</li> </ul> <p>Next: - API Plugin \u27a1 - Streamlit Plugin \u27a1</p>"},{"location":"user-guide/plugins/api-plugin/","title":"\ud83d\udd0c Gittxt API Plugin","text":"<p>The Gittxt API Plugin exposes a RESTful interface for programmatic scanning and artifact retrieval. It's ideal for integrating Gittxt functionality into frontend dashboards, automation workflows, or other dev tools.</p>"},{"location":"user-guide/plugins/api-plugin/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Run the API server: <pre><code>gittxt plugin run gittxt-api\n</code></pre></p> <p>Once running, visit Swagger UI: <pre><code>http://localhost:8000/docs\n</code></pre></p>"},{"location":"user-guide/plugins/api-plugin/#route-prefix","title":"\ud83d\udccc Route Prefix","text":"<p>All endpoints are available under: <pre><code>/v1/\n</code></pre> Example: <pre><code>POST /v1/scan\n</code></pre></p>"},{"location":"user-guide/plugins/api-plugin/#key-features","title":"\ud83d\udd27 Key Features","text":"<ul> <li>Versioned REST API (<code>/v1/...</code>)</li> <li>Full scan options:</li> <li><code>docs_only</code>, <code>lite</code>, <code>create_zip</code>, <code>tree_depth</code>, <code>skip_tree</code></li> <li>Glob-based <code>include_patterns</code>, <code>exclude_patterns</code>, <code>exclude_dirs</code></li> <li>Support for scanning uploaded ZIP files</li> <li>Summary JSON, downloadable artifacts, structured cleanup</li> <li>Built-in CORS support (for frontend integration)</li> </ul>"},{"location":"user-guide/plugins/api-plugin/#upload-scan","title":"\ud83d\udce5 Upload &amp; Scan","text":"<p>Use the <code>/v1/upload</code> endpoint to scan compressed <code>.zip</code> archives:</p> <p>Request <pre><code>POST /v1/upload?lite=true\nContent-Type: multipart/form-data\n</code></pre> Payload: a <code>.zip</code> file with your repo.</p> <p>Response <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Upload &amp; scan completed\",\n  \"data\": {\n    \"scan_id\": \"...\",\n    \"repo_name\": \"...\",\n    \"num_textual_files\": 14,\n    \"num_non_textual_files\": 3\n  }\n}\n</code></pre></p>"},{"location":"user-guide/plugins/api-plugin/#full-scan-example","title":"\ud83d\udce1 Full Scan Example","text":"<pre><code>POST /v1/scan\nContent-Type: application/json\n</code></pre> <p>Payload: <pre><code>{\n  \"repo_path\": \"https://github.com/user/repo\",\n  \"branch\": \"main\",\n  \"exclude_dirs\": [\"tests\"],\n  \"include_patterns\": [\"**/*.py\"],\n  \"exclude_patterns\": [\"*.log\"],\n  \"lite\": false,\n  \"create_zip\": true,\n  \"tree_depth\": 3,\n  \"docs_only\": false,\n  \"sync_ignore\": true,\n  \"skip_tree\": false\n}\n</code></pre></p> <p>Response: Returns scan ID, summary, artifact paths, and file counts.</p>"},{"location":"user-guide/plugins/api-plugin/#artifacts-downloads","title":"\ud83d\udce6 Artifacts &amp; Downloads","text":"<p>Use <code>/v1/download/{scan_id}?format=txt|json|md|zip</code> to fetch outputs.</p> <p>Use <code>/v1/summary/{scan_id}</code> to get structured report metadata.</p> <p>Use <code>/v1/cleanup/{scan_id}</code> to delete the generated folder and all artifacts.</p>"},{"location":"user-guide/plugins/api-plugin/#security-notes","title":"\ud83d\udd10 Security Notes","text":"<ul> <li>CORS is enabled for all domains by default.</li> <li>No authentication is applied \u2014 lock down via reverse proxy or key-based auth in production.</li> </ul>"},{"location":"user-guide/plugins/api-plugin/#developer-notes","title":"\ud83d\udee0 Developer Notes","text":"<p>This plugin is built with FastAPI, structured as: <pre><code>src/plugins/gittxt_api/\n\u251c\u2500\u2500 api/v1/endpoints/...\n\u251c\u2500\u2500 core/services/...\n\u251c\u2500\u2500 cli_api.py\n\u2514\u2500\u2500 main.py\n</code></pre></p> <p>Dependencies are declared in <code>requirements.txt</code>. Running <code>gittxt plugin run gittxt-api</code> will install them automatically.</p> <p>Back: Plugins Overview | Next: Streamlit Plugin \u27a1</p>"},{"location":"user-guide/plugins/streamlit-plugin/","title":"\ud83c\udf10 Gittxt Streamlit Plugin","text":"<p>The Streamlit Plugin provides a clean visual interface for Gittxt. It allows users to scan GitHub repositories and download AI-ready textual outputs via a local or cloud-hosted web app.</p>"},{"location":"user-guide/plugins/streamlit-plugin/#launch-the-web-app","title":"\ud83d\ude80 Launch the Web App","text":""},{"location":"user-guide/plugins/streamlit-plugin/#locally-via-cli","title":"Locally via CLI","text":"<pre><code>gittxt plugin run gittxt-streamlit\n</code></pre>"},{"location":"user-guide/plugins/streamlit-plugin/#or-manually","title":"Or Manually","text":"<pre><code>streamlit run src/plugins/gittxt_streamlit/main.py\n</code></pre> <p>App runs at: http://localhost:8501</p>"},{"location":"user-guide/plugins/streamlit-plugin/#hosted-version","title":"\u2601\ufe0f Hosted Version","text":"<p>Access the live app on Streamlit Cloud: \ud83d\udc49 gittxt.streamlit.app</p> <p>This version mirrors the full CLI functionality with a polished UX.</p>"},{"location":"user-guide/plugins/streamlit-plugin/#features","title":"\ud83c\udf9b Features","text":""},{"location":"user-guide/plugins/streamlit-plugin/#scan-github-repos","title":"\ud83d\udcc2 Scan GitHub Repos","text":"<ul> <li>Input any public GitHub repository URL</li> <li>Configure filters: <code>include/exclude patterns</code>, directory filters, <code>.gittxtignore</code> support</li> <li>Set output options: <code>.txt</code>, <code>.json</code>, <code>.md</code>, <code>--lite</code>, <code>--zip</code>, <code>--tree-depth</code></li> <li>View summary metrics, skipped files, and non-textual assets</li> <li>One-click downloads for all outputs (including ZIP bundle)</li> </ul>"},{"location":"user-guide/plugins/streamlit-plugin/#ai-repo-summary-beta","title":"\ud83e\udde0 AI Repo Summary (Beta)","text":"<ul> <li>Generate LLM-based repo summaries using OpenAI or Ollama</li> <li>Choose Docs-Only vs Full-File mode for context</li> <li>View token-aware context preview before analysis</li> <li>Interact via multi-turn chat</li> <li>Export chat history as <code>.json</code> or <code>.md</code></li> </ul>"},{"location":"user-guide/plugins/streamlit-plugin/#output-directory-structure","title":"\ud83d\udcc1 Output Directory Structure","text":"<p>By default, outputs are written to: <pre><code>/tmp/gittxt_streamlit_output/\n\u251c\u2500\u2500 txt/\n\u251c\u2500\u2500 json/\n\u251c\u2500\u2500 md/\n\u2514\u2500\u2500 zip/\n</code></pre></p> <p>These are cleared when the Restart button is clicked.</p>"},{"location":"user-guide/plugins/streamlit-plugin/#architecture-overview","title":"\ud83d\udee0 Architecture Overview","text":"<p>The plugin is modular and mirrors the CLI tool:</p> <pre><code>src/plugins/gittxt_streamlit/\n\u251c\u2500\u2500 main.py                # UI router (Scan \u2194 AI Summary)\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 scan/                  # Scan interface\n\u2502   \u251c\u2500\u2500 app.py             # Scan UI\n\u2502   \u251c\u2500\u2500 pipeline.py        # CLI-equivalent scanner logic\n\u2502   \u2514\u2500\u2500 ui_components.py   # Filters, results, downloads\n\u2514\u2500\u2500 ai/                    # AI Summary interface\n    \u251c\u2500\u2500 ai_summary.py      # Full LLM UI\n    \u251c\u2500\u2500 llm_handler.py     # OpenAI / Ollama API calls\n    \u251c\u2500\u2500 context_builder.py # Context builder from scanned files\n    \u2514\u2500\u2500 chat_exporter.py   # Export markdown / json chat\n</code></pre>"},{"location":"user-guide/plugins/streamlit-plugin/#plugin-management","title":"\u2699\ufe0f Plugin Management","text":"<p>You can use the plugin CLI system to install and run this plugin:</p>"},{"location":"user-guide/plugins/streamlit-plugin/#install","title":"Install","text":"<pre><code>gittxt plugin install gittxt-streamlit\n</code></pre>"},{"location":"user-guide/plugins/streamlit-plugin/#run","title":"Run","text":"<pre><code>gittxt plugin run gittxt-streamlit\n</code></pre> <p>Dependencies in <code>requirements.txt</code> are auto-installed on first run.</p>"},{"location":"user-guide/plugins/streamlit-plugin/#notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li>Scans call <code>gittxt scan</code> via internal async logic, mirroring CLI behavior.</li> <li>Only one scan can run per session. Restart clears prior output.</li> <li>Chat summary is experimental \u2014 LLM issues may occur (especially with token overflow).</li> </ul>"},{"location":"user-guide/plugins/streamlit-plugin/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Use Docs-Only mode for faster LLM summaries</li> <li>Toggle Advanced Filters to fine-tune file selection</li> <li><code>.gittxtignore</code> is supported with the Sync Ignore checkbox</li> <li>Token counts and skipped file reasons are visible in the scan summary</li> </ul> <p>Back: API Plugin</p>"}]}